// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package messages.botaccess
import cqrs.TypeMappers._
import scala.collection.JavaConversions._

@SerialVersionUID(0L)
final case class BotAccessEvents(
    ) extends scalapb.GeneratedMessage with scalapb.Message[BotAccessEvents] with scalapb.lenses.Updatable[BotAccessEvents] {
    final override def serializedSize: _root_.scala.Int = 0
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessEvents = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag => _input__.skipField(tag)
        }
      }
      messages.botaccess.BotAccessEvents(
      )
    }
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = throw new MatchError(__fieldNumber)
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = messages.botaccess.BotAccessEvents
}

object BotAccessEvents extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessEvents] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessEvents] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessEvents = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    messages.botaccess.BotAccessEvents(
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessEvents] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      messages.botaccess.BotAccessEvents(
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BotaccessProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BotaccessProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.messages.botaccess.BotAccessEvents.AccessGranted,
    _root_.messages.botaccess.BotAccessEvents.AccessRevoked,
    _root_.messages.botaccess.BotAccessEvents.PremiumAccessGranted,
    _root_.messages.botaccess.BotAccessEvents.PremiumAccessRevoked
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = messages.botaccess.BotAccessEvents(
  )
  @SerialVersionUID(0L)
  final case class AccessGranted(
      ts: java.time.Instant,
      roles: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
      ) extends scalapb.GeneratedMessage with scalapb.Message[AccessGranted] with scalapb.lenses.Updatable[AccessGranted] with botaccess.BotAccessEvent {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, messages.botaccess.BotAccessEvents.AccessGranted._typemapper_ts.toBase(ts))
        roles.foreach(roles => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, roles))
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        roles.foreach { __v =>
          _output__.writeString(1, __v)
        };
        _output__.writeInt64(2, messages.botaccess.BotAccessEvents.AccessGranted._typemapper_ts.toBase(ts))
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessEvents.AccessGranted = {
        var __ts = this.ts
        val __roles = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.roles)
        var __requiredFields0: _root_.scala.Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 16 =>
              __ts = messages.botaccess.BotAccessEvents.AccessGranted._typemapper_ts.toCustom(_input__.readInt64())
              __requiredFields0 &= 0xfffffffffffffffeL
            case 10 =>
              __roles += _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        messages.botaccess.BotAccessEvents.AccessGranted(
            ts = __ts,
            roles = __roles.result()
        )
      }
      def withTs(__v: java.time.Instant): AccessGranted = copy(ts = __v)
      def clearRoles = copy(roles = _root_.scala.collection.Seq.empty)
      def addRoles(__vs: _root_.scala.Predef.String*): AccessGranted = addAllRoles(__vs)
      def addAllRoles(__vs: TraversableOnce[_root_.scala.Predef.String]): AccessGranted = copy(roles = roles ++ __vs)
      def withRoles(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): AccessGranted = copy(roles = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 2 => messages.botaccess.BotAccessEvents.AccessGranted._typemapper_ts.toBase(ts)
          case 1 => roles
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 2 => _root_.scalapb.descriptors.PLong(messages.botaccess.BotAccessEvents.AccessGranted._typemapper_ts.toBase(ts))
          case 1 => _root_.scalapb.descriptors.PRepeated(roles.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = messages.botaccess.BotAccessEvents.AccessGranted
  }
  
  object AccessGranted extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessEvents.AccessGranted] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessEvents.AccessGranted] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessEvents.AccessGranted = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      messages.botaccess.BotAccessEvents.AccessGranted(
        messages.botaccess.BotAccessEvents.AccessGranted._typemapper_ts.toCustom(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Long]),
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessEvents.AccessGranted] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        messages.botaccess.BotAccessEvents.AccessGranted(
          messages.botaccess.BotAccessEvents.AccessGranted._typemapper_ts.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Long]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = messages.botaccess.BotAccessEvents.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = messages.botaccess.BotAccessEvents.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = messages.botaccess.BotAccessEvents.AccessGranted(
      ts = messages.botaccess.BotAccessEvents.AccessGranted._typemapper_ts.toCustom(0L)
    )
    implicit class AccessGrantedLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessEvents.AccessGranted]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessEvents.AccessGranted](_l) {
      def ts: _root_.scalapb.lenses.Lens[UpperPB, java.time.Instant] = field(_.ts)((c_, f_) => c_.copy(ts = f_))
      def roles: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.roles)((c_, f_) => c_.copy(roles = f_))
    }
    final val TS_FIELD_NUMBER = 2
    final val ROLES_FIELD_NUMBER = 1
    @transient
    private val _typemapper_ts: _root_.scalapb.TypeMapper[_root_.scala.Long, java.time.Instant] = implicitly[_root_.scalapb.TypeMapper[_root_.scala.Long, java.time.Instant]]
  }
  
  @SerialVersionUID(0L)
  final case class AccessRevoked(
      ts: java.time.Instant,
      roles: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
      ) extends scalapb.GeneratedMessage with scalapb.Message[AccessRevoked] with scalapb.lenses.Updatable[AccessRevoked] with botaccess.BotAccessEvent {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, messages.botaccess.BotAccessEvents.AccessRevoked._typemapper_ts.toBase(ts))
        roles.foreach(roles => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, roles))
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        roles.foreach { __v =>
          _output__.writeString(1, __v)
        };
        _output__.writeInt64(2, messages.botaccess.BotAccessEvents.AccessRevoked._typemapper_ts.toBase(ts))
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessEvents.AccessRevoked = {
        var __ts = this.ts
        val __roles = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.roles)
        var __requiredFields0: _root_.scala.Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 16 =>
              __ts = messages.botaccess.BotAccessEvents.AccessRevoked._typemapper_ts.toCustom(_input__.readInt64())
              __requiredFields0 &= 0xfffffffffffffffeL
            case 10 =>
              __roles += _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        messages.botaccess.BotAccessEvents.AccessRevoked(
            ts = __ts,
            roles = __roles.result()
        )
      }
      def withTs(__v: java.time.Instant): AccessRevoked = copy(ts = __v)
      def clearRoles = copy(roles = _root_.scala.collection.Seq.empty)
      def addRoles(__vs: _root_.scala.Predef.String*): AccessRevoked = addAllRoles(__vs)
      def addAllRoles(__vs: TraversableOnce[_root_.scala.Predef.String]): AccessRevoked = copy(roles = roles ++ __vs)
      def withRoles(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): AccessRevoked = copy(roles = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 2 => messages.botaccess.BotAccessEvents.AccessRevoked._typemapper_ts.toBase(ts)
          case 1 => roles
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 2 => _root_.scalapb.descriptors.PLong(messages.botaccess.BotAccessEvents.AccessRevoked._typemapper_ts.toBase(ts))
          case 1 => _root_.scalapb.descriptors.PRepeated(roles.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = messages.botaccess.BotAccessEvents.AccessRevoked
  }
  
  object AccessRevoked extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessEvents.AccessRevoked] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessEvents.AccessRevoked] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessEvents.AccessRevoked = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      messages.botaccess.BotAccessEvents.AccessRevoked(
        messages.botaccess.BotAccessEvents.AccessRevoked._typemapper_ts.toCustom(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Long]),
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessEvents.AccessRevoked] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        messages.botaccess.BotAccessEvents.AccessRevoked(
          messages.botaccess.BotAccessEvents.AccessRevoked._typemapper_ts.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Long]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = messages.botaccess.BotAccessEvents.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = messages.botaccess.BotAccessEvents.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = messages.botaccess.BotAccessEvents.AccessRevoked(
      ts = messages.botaccess.BotAccessEvents.AccessRevoked._typemapper_ts.toCustom(0L)
    )
    implicit class AccessRevokedLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessEvents.AccessRevoked]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessEvents.AccessRevoked](_l) {
      def ts: _root_.scalapb.lenses.Lens[UpperPB, java.time.Instant] = field(_.ts)((c_, f_) => c_.copy(ts = f_))
      def roles: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.roles)((c_, f_) => c_.copy(roles = f_))
    }
    final val TS_FIELD_NUMBER = 2
    final val ROLES_FIELD_NUMBER = 1
    @transient
    private val _typemapper_ts: _root_.scalapb.TypeMapper[_root_.scala.Long, java.time.Instant] = implicitly[_root_.scalapb.TypeMapper[_root_.scala.Long, java.time.Instant]]
  }
  
  @SerialVersionUID(0L)
  final case class PremiumAccessGranted(
      ts: java.time.Instant,
      premiumAccesses: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
      ) extends scalapb.GeneratedMessage with scalapb.Message[PremiumAccessGranted] with scalapb.lenses.Updatable[PremiumAccessGranted] with botaccess.BotAccessEvent {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, messages.botaccess.BotAccessEvents.PremiumAccessGranted._typemapper_ts.toBase(ts))
        premiumAccesses.foreach(premiumAccesses => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, premiumAccesses))
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        premiumAccesses.foreach { __v =>
          _output__.writeString(1, __v)
        };
        _output__.writeInt64(2, messages.botaccess.BotAccessEvents.PremiumAccessGranted._typemapper_ts.toBase(ts))
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessEvents.PremiumAccessGranted = {
        var __ts = this.ts
        val __premiumAccesses = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.premiumAccesses)
        var __requiredFields0: _root_.scala.Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 16 =>
              __ts = messages.botaccess.BotAccessEvents.PremiumAccessGranted._typemapper_ts.toCustom(_input__.readInt64())
              __requiredFields0 &= 0xfffffffffffffffeL
            case 10 =>
              __premiumAccesses += _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        messages.botaccess.BotAccessEvents.PremiumAccessGranted(
            ts = __ts,
            premiumAccesses = __premiumAccesses.result()
        )
      }
      def withTs(__v: java.time.Instant): PremiumAccessGranted = copy(ts = __v)
      def clearPremiumAccesses = copy(premiumAccesses = _root_.scala.collection.Seq.empty)
      def addPremiumAccesses(__vs: _root_.scala.Predef.String*): PremiumAccessGranted = addAllPremiumAccesses(__vs)
      def addAllPremiumAccesses(__vs: TraversableOnce[_root_.scala.Predef.String]): PremiumAccessGranted = copy(premiumAccesses = premiumAccesses ++ __vs)
      def withPremiumAccesses(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): PremiumAccessGranted = copy(premiumAccesses = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 2 => messages.botaccess.BotAccessEvents.PremiumAccessGranted._typemapper_ts.toBase(ts)
          case 1 => premiumAccesses
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 2 => _root_.scalapb.descriptors.PLong(messages.botaccess.BotAccessEvents.PremiumAccessGranted._typemapper_ts.toBase(ts))
          case 1 => _root_.scalapb.descriptors.PRepeated(premiumAccesses.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = messages.botaccess.BotAccessEvents.PremiumAccessGranted
  }
  
  object PremiumAccessGranted extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessEvents.PremiumAccessGranted] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessEvents.PremiumAccessGranted] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessEvents.PremiumAccessGranted = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      messages.botaccess.BotAccessEvents.PremiumAccessGranted(
        messages.botaccess.BotAccessEvents.PremiumAccessGranted._typemapper_ts.toCustom(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Long]),
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessEvents.PremiumAccessGranted] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        messages.botaccess.BotAccessEvents.PremiumAccessGranted(
          messages.botaccess.BotAccessEvents.PremiumAccessGranted._typemapper_ts.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Long]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = messages.botaccess.BotAccessEvents.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = messages.botaccess.BotAccessEvents.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = messages.botaccess.BotAccessEvents.PremiumAccessGranted(
      ts = messages.botaccess.BotAccessEvents.PremiumAccessGranted._typemapper_ts.toCustom(0L)
    )
    implicit class PremiumAccessGrantedLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessEvents.PremiumAccessGranted]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessEvents.PremiumAccessGranted](_l) {
      def ts: _root_.scalapb.lenses.Lens[UpperPB, java.time.Instant] = field(_.ts)((c_, f_) => c_.copy(ts = f_))
      def premiumAccesses: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.premiumAccesses)((c_, f_) => c_.copy(premiumAccesses = f_))
    }
    final val TS_FIELD_NUMBER = 2
    final val PREMIUM_ACCESSES_FIELD_NUMBER = 1
    @transient
    private val _typemapper_ts: _root_.scalapb.TypeMapper[_root_.scala.Long, java.time.Instant] = implicitly[_root_.scalapb.TypeMapper[_root_.scala.Long, java.time.Instant]]
  }
  
  @SerialVersionUID(0L)
  final case class PremiumAccessRevoked(
      ts: java.time.Instant,
      premiumAccesses: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
      ) extends scalapb.GeneratedMessage with scalapb.Message[PremiumAccessRevoked] with scalapb.lenses.Updatable[PremiumAccessRevoked] with botaccess.BotAccessEvent {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, messages.botaccess.BotAccessEvents.PremiumAccessRevoked._typemapper_ts.toBase(ts))
        premiumAccesses.foreach(premiumAccesses => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, premiumAccesses))
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        premiumAccesses.foreach { __v =>
          _output__.writeString(1, __v)
        };
        _output__.writeInt64(2, messages.botaccess.BotAccessEvents.PremiumAccessRevoked._typemapper_ts.toBase(ts))
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessEvents.PremiumAccessRevoked = {
        var __ts = this.ts
        val __premiumAccesses = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.premiumAccesses)
        var __requiredFields0: _root_.scala.Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 16 =>
              __ts = messages.botaccess.BotAccessEvents.PremiumAccessRevoked._typemapper_ts.toCustom(_input__.readInt64())
              __requiredFields0 &= 0xfffffffffffffffeL
            case 10 =>
              __premiumAccesses += _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        messages.botaccess.BotAccessEvents.PremiumAccessRevoked(
            ts = __ts,
            premiumAccesses = __premiumAccesses.result()
        )
      }
      def withTs(__v: java.time.Instant): PremiumAccessRevoked = copy(ts = __v)
      def clearPremiumAccesses = copy(premiumAccesses = _root_.scala.collection.Seq.empty)
      def addPremiumAccesses(__vs: _root_.scala.Predef.String*): PremiumAccessRevoked = addAllPremiumAccesses(__vs)
      def addAllPremiumAccesses(__vs: TraversableOnce[_root_.scala.Predef.String]): PremiumAccessRevoked = copy(premiumAccesses = premiumAccesses ++ __vs)
      def withPremiumAccesses(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): PremiumAccessRevoked = copy(premiumAccesses = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 2 => messages.botaccess.BotAccessEvents.PremiumAccessRevoked._typemapper_ts.toBase(ts)
          case 1 => premiumAccesses
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 2 => _root_.scalapb.descriptors.PLong(messages.botaccess.BotAccessEvents.PremiumAccessRevoked._typemapper_ts.toBase(ts))
          case 1 => _root_.scalapb.descriptors.PRepeated(premiumAccesses.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = messages.botaccess.BotAccessEvents.PremiumAccessRevoked
  }
  
  object PremiumAccessRevoked extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessEvents.PremiumAccessRevoked] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessEvents.PremiumAccessRevoked] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessEvents.PremiumAccessRevoked = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      messages.botaccess.BotAccessEvents.PremiumAccessRevoked(
        messages.botaccess.BotAccessEvents.PremiumAccessRevoked._typemapper_ts.toCustom(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Long]),
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessEvents.PremiumAccessRevoked] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        messages.botaccess.BotAccessEvents.PremiumAccessRevoked(
          messages.botaccess.BotAccessEvents.PremiumAccessRevoked._typemapper_ts.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Long]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = messages.botaccess.BotAccessEvents.javaDescriptor.getNestedTypes.get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = messages.botaccess.BotAccessEvents.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = messages.botaccess.BotAccessEvents.PremiumAccessRevoked(
      ts = messages.botaccess.BotAccessEvents.PremiumAccessRevoked._typemapper_ts.toCustom(0L)
    )
    implicit class PremiumAccessRevokedLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessEvents.PremiumAccessRevoked]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessEvents.PremiumAccessRevoked](_l) {
      def ts: _root_.scalapb.lenses.Lens[UpperPB, java.time.Instant] = field(_.ts)((c_, f_) => c_.copy(ts = f_))
      def premiumAccesses: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.premiumAccesses)((c_, f_) => c_.copy(premiumAccesses = f_))
    }
    final val TS_FIELD_NUMBER = 2
    final val PREMIUM_ACCESSES_FIELD_NUMBER = 1
    @transient
    private val _typemapper_ts: _root_.scalapb.TypeMapper[_root_.scala.Long, java.time.Instant] = implicitly[_root_.scalapb.TypeMapper[_root_.scala.Long, java.time.Instant]]
  }
  
  implicit class BotAccessEventsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessEvents]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessEvents](_l) {
  }
}

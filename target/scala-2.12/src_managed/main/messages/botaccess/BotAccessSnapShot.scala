// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package messages.botaccess
import cqrs.TypeMappers._
import scala.collection.JavaConversions._

@SerialVersionUID(0L)
final case class BotAccessSnapShot(
    id: _root_.scala.Int,
    roles: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    premiumAccesses: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[BotAccessSnapShot] with scalapb.lenses.Updatable[BotAccessSnapShot] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, id)
      roles.foreach(roles => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, roles))
      premiumAccesses.foreach(premiumAccesses => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, premiumAccesses))
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeInt32(1, id)
      roles.foreach { __v =>
        _output__.writeString(2, __v)
      };
      premiumAccesses.foreach { __v =>
        _output__.writeString(3, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessSnapShot = {
      var __id = this.id
      val __roles = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.roles)
      val __premiumAccesses = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.premiumAccesses)
      var __requiredFields0: _root_.scala.Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __id = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __roles += _input__.readString()
          case 26 =>
            __premiumAccesses += _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      messages.botaccess.BotAccessSnapShot(
          id = __id,
          roles = __roles.result(),
          premiumAccesses = __premiumAccesses.result()
      )
    }
    def withId(__v: _root_.scala.Int): BotAccessSnapShot = copy(id = __v)
    def clearRoles = copy(roles = _root_.scala.collection.Seq.empty)
    def addRoles(__vs: _root_.scala.Predef.String*): BotAccessSnapShot = addAllRoles(__vs)
    def addAllRoles(__vs: TraversableOnce[_root_.scala.Predef.String]): BotAccessSnapShot = copy(roles = roles ++ __vs)
    def withRoles(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): BotAccessSnapShot = copy(roles = __v)
    def clearPremiumAccesses = copy(premiumAccesses = _root_.scala.collection.Seq.empty)
    def addPremiumAccesses(__vs: _root_.scala.Predef.String*): BotAccessSnapShot = addAllPremiumAccesses(__vs)
    def addAllPremiumAccesses(__vs: TraversableOnce[_root_.scala.Predef.String]): BotAccessSnapShot = copy(premiumAccesses = premiumAccesses ++ __vs)
    def withPremiumAccesses(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): BotAccessSnapShot = copy(premiumAccesses = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => id
        case 2 => roles
        case 3 => premiumAccesses
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(id)
        case 2 => _root_.scalapb.descriptors.PRepeated(roles.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 3 => _root_.scalapb.descriptors.PRepeated(premiumAccesses.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = messages.botaccess.BotAccessSnapShot
}

object BotAccessSnapShot extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessSnapShot] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessSnapShot] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessSnapShot = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    messages.botaccess.BotAccessSnapShot(
      __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessSnapShot] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      messages.botaccess.BotAccessSnapShot(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BotaccessProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BotaccessProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = messages.botaccess.BotAccessSnapShot(
    id = 0
  )
  implicit class BotAccessSnapShotLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessSnapShot]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessSnapShot](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def roles: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.roles)((c_, f_) => c_.copy(roles = f_))
    def premiumAccesses: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.premiumAccesses)((c_, f_) => c_.copy(premiumAccesses = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val ROLES_FIELD_NUMBER = 2
  final val PREMIUM_ACCESSES_FIELD_NUMBER = 3
}

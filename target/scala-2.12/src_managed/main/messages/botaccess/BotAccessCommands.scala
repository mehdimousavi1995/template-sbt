// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package messages.botaccess
import cqrs.TypeMappers._
import scala.collection.JavaConversions._

@SerialVersionUID(0L)
final case class BotAccessCommands(
    ) extends scalapb.GeneratedMessage with scalapb.Message[BotAccessCommands] with scalapb.lenses.Updatable[BotAccessCommands] {
    final override def serializedSize: _root_.scala.Int = 0
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessCommands = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag => _input__.skipField(tag)
        }
      }
      messages.botaccess.BotAccessCommands(
      )
    }
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = throw new MatchError(__fieldNumber)
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = messages.botaccess.BotAccessCommands
}

object BotAccessCommands extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessCommands] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessCommands] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessCommands = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    messages.botaccess.BotAccessCommands(
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessCommands] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      messages.botaccess.BotAccessCommands(
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BotaccessProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BotaccessProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.messages.botaccess.BotAccessCommands.GrantPremiumAccess,
    _root_.messages.botaccess.BotAccessCommands.RevokePremiumAccess,
    _root_.messages.botaccess.BotAccessCommands.GrantAccess,
    _root_.messages.botaccess.BotAccessCommands.RevokeAccess
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = messages.botaccess.BotAccessCommands(
  )
  @SerialVersionUID(0L)
  final case class GrantPremiumAccess(
      userId: _root_.scala.Int,
      accesses: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
      ) extends scalapb.GeneratedMessage with scalapb.Message[GrantPremiumAccess] with scalapb.lenses.Updatable[GrantPremiumAccess] with botaccess.BotAccessCommand {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, userId)
        accesses.foreach(accesses => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, accesses))
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeInt32(1, userId)
        accesses.foreach { __v =>
          _output__.writeString(2, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessCommands.GrantPremiumAccess = {
        var __userId = this.userId
        val __accesses = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.accesses)
        var __requiredFields0: _root_.scala.Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __userId = _input__.readInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __accesses += _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        messages.botaccess.BotAccessCommands.GrantPremiumAccess(
            userId = __userId,
            accesses = __accesses.result()
        )
      }
      def withUserId(__v: _root_.scala.Int): GrantPremiumAccess = copy(userId = __v)
      def clearAccesses = copy(accesses = _root_.scala.collection.Seq.empty)
      def addAccesses(__vs: _root_.scala.Predef.String*): GrantPremiumAccess = addAllAccesses(__vs)
      def addAllAccesses(__vs: TraversableOnce[_root_.scala.Predef.String]): GrantPremiumAccess = copy(accesses = accesses ++ __vs)
      def withAccesses(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): GrantPremiumAccess = copy(accesses = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => userId
          case 2 => accesses
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(userId)
          case 2 => _root_.scalapb.descriptors.PRepeated(accesses.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = messages.botaccess.BotAccessCommands.GrantPremiumAccess
  }
  
  object GrantPremiumAccess extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessCommands.GrantPremiumAccess] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessCommands.GrantPremiumAccess] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessCommands.GrantPremiumAccess = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      messages.botaccess.BotAccessCommands.GrantPremiumAccess(
        __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessCommands.GrantPremiumAccess] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        messages.botaccess.BotAccessCommands.GrantPremiumAccess(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = messages.botaccess.BotAccessCommands.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = messages.botaccess.BotAccessCommands.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = messages.botaccess.BotAccessCommands.GrantPremiumAccess(
      userId = 0
    )
    implicit class GrantPremiumAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessCommands.GrantPremiumAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessCommands.GrantPremiumAccess](_l) {
      def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
      def accesses: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.accesses)((c_, f_) => c_.copy(accesses = f_))
    }
    final val USER_ID_FIELD_NUMBER = 1
    final val ACCESSES_FIELD_NUMBER = 2
  }
  
  @SerialVersionUID(0L)
  final case class RevokePremiumAccess(
      userId: _root_.scala.Int,
      accesses: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
      ) extends scalapb.GeneratedMessage with scalapb.Message[RevokePremiumAccess] with scalapb.lenses.Updatable[RevokePremiumAccess] with botaccess.BotAccessCommand {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, userId)
        accesses.foreach(accesses => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, accesses))
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeInt32(1, userId)
        accesses.foreach { __v =>
          _output__.writeString(2, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessCommands.RevokePremiumAccess = {
        var __userId = this.userId
        val __accesses = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.accesses)
        var __requiredFields0: _root_.scala.Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __userId = _input__.readInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __accesses += _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        messages.botaccess.BotAccessCommands.RevokePremiumAccess(
            userId = __userId,
            accesses = __accesses.result()
        )
      }
      def withUserId(__v: _root_.scala.Int): RevokePremiumAccess = copy(userId = __v)
      def clearAccesses = copy(accesses = _root_.scala.collection.Seq.empty)
      def addAccesses(__vs: _root_.scala.Predef.String*): RevokePremiumAccess = addAllAccesses(__vs)
      def addAllAccesses(__vs: TraversableOnce[_root_.scala.Predef.String]): RevokePremiumAccess = copy(accesses = accesses ++ __vs)
      def withAccesses(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): RevokePremiumAccess = copy(accesses = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => userId
          case 2 => accesses
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(userId)
          case 2 => _root_.scalapb.descriptors.PRepeated(accesses.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = messages.botaccess.BotAccessCommands.RevokePremiumAccess
  }
  
  object RevokePremiumAccess extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessCommands.RevokePremiumAccess] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessCommands.RevokePremiumAccess] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessCommands.RevokePremiumAccess = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      messages.botaccess.BotAccessCommands.RevokePremiumAccess(
        __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessCommands.RevokePremiumAccess] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        messages.botaccess.BotAccessCommands.RevokePremiumAccess(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = messages.botaccess.BotAccessCommands.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = messages.botaccess.BotAccessCommands.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = messages.botaccess.BotAccessCommands.RevokePremiumAccess(
      userId = 0
    )
    implicit class RevokePremiumAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessCommands.RevokePremiumAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessCommands.RevokePremiumAccess](_l) {
      def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
      def accesses: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.accesses)((c_, f_) => c_.copy(accesses = f_))
    }
    final val USER_ID_FIELD_NUMBER = 1
    final val ACCESSES_FIELD_NUMBER = 2
  }
  
  @SerialVersionUID(0L)
  final case class GrantAccess(
      userId: _root_.scala.Int,
      roles: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
      ) extends scalapb.GeneratedMessage with scalapb.Message[GrantAccess] with scalapb.lenses.Updatable[GrantAccess] with botaccess.BotAccessCommand {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, userId)
        roles.foreach(roles => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, roles))
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeInt32(1, userId)
        roles.foreach { __v =>
          _output__.writeString(2, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessCommands.GrantAccess = {
        var __userId = this.userId
        val __roles = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.roles)
        var __requiredFields0: _root_.scala.Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __userId = _input__.readInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __roles += _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        messages.botaccess.BotAccessCommands.GrantAccess(
            userId = __userId,
            roles = __roles.result()
        )
      }
      def withUserId(__v: _root_.scala.Int): GrantAccess = copy(userId = __v)
      def clearRoles = copy(roles = _root_.scala.collection.Seq.empty)
      def addRoles(__vs: _root_.scala.Predef.String*): GrantAccess = addAllRoles(__vs)
      def addAllRoles(__vs: TraversableOnce[_root_.scala.Predef.String]): GrantAccess = copy(roles = roles ++ __vs)
      def withRoles(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): GrantAccess = copy(roles = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => userId
          case 2 => roles
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(userId)
          case 2 => _root_.scalapb.descriptors.PRepeated(roles.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = messages.botaccess.BotAccessCommands.GrantAccess
  }
  
  object GrantAccess extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessCommands.GrantAccess] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessCommands.GrantAccess] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessCommands.GrantAccess = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      messages.botaccess.BotAccessCommands.GrantAccess(
        __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessCommands.GrantAccess] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        messages.botaccess.BotAccessCommands.GrantAccess(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = messages.botaccess.BotAccessCommands.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = messages.botaccess.BotAccessCommands.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = messages.botaccess.BotAccessCommands.GrantAccess(
      userId = 0
    )
    implicit class GrantAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessCommands.GrantAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessCommands.GrantAccess](_l) {
      def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
      def roles: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.roles)((c_, f_) => c_.copy(roles = f_))
    }
    final val USER_ID_FIELD_NUMBER = 1
    final val ROLES_FIELD_NUMBER = 2
  }
  
  @SerialVersionUID(0L)
  final case class RevokeAccess(
      userId: _root_.scala.Int,
      roles: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
      ) extends scalapb.GeneratedMessage with scalapb.Message[RevokeAccess] with scalapb.lenses.Updatable[RevokeAccess] with botaccess.BotAccessCommand {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, userId)
        roles.foreach(roles => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, roles))
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeInt32(1, userId)
        roles.foreach { __v =>
          _output__.writeString(2, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessCommands.RevokeAccess = {
        var __userId = this.userId
        val __roles = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.roles)
        var __requiredFields0: _root_.scala.Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __userId = _input__.readInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __roles += _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        messages.botaccess.BotAccessCommands.RevokeAccess(
            userId = __userId,
            roles = __roles.result()
        )
      }
      def withUserId(__v: _root_.scala.Int): RevokeAccess = copy(userId = __v)
      def clearRoles = copy(roles = _root_.scala.collection.Seq.empty)
      def addRoles(__vs: _root_.scala.Predef.String*): RevokeAccess = addAllRoles(__vs)
      def addAllRoles(__vs: TraversableOnce[_root_.scala.Predef.String]): RevokeAccess = copy(roles = roles ++ __vs)
      def withRoles(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): RevokeAccess = copy(roles = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => userId
          case 2 => roles
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(userId)
          case 2 => _root_.scalapb.descriptors.PRepeated(roles.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = messages.botaccess.BotAccessCommands.RevokeAccess
  }
  
  object RevokeAccess extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessCommands.RevokeAccess] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessCommands.RevokeAccess] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessCommands.RevokeAccess = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      messages.botaccess.BotAccessCommands.RevokeAccess(
        __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessCommands.RevokeAccess] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        messages.botaccess.BotAccessCommands.RevokeAccess(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = messages.botaccess.BotAccessCommands.javaDescriptor.getNestedTypes.get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = messages.botaccess.BotAccessCommands.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = messages.botaccess.BotAccessCommands.RevokeAccess(
      userId = 0
    )
    implicit class RevokeAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessCommands.RevokeAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessCommands.RevokeAccess](_l) {
      def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
      def roles: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.roles)((c_, f_) => c_.copy(roles = f_))
    }
    final val USER_ID_FIELD_NUMBER = 1
    final val ROLES_FIELD_NUMBER = 2
  }
  
  implicit class BotAccessCommandsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessCommands]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessCommands](_l) {
  }
}

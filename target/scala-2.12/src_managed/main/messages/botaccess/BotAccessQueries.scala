// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package messages.botaccess
import cqrs.TypeMappers._
import scala.collection.JavaConversions._

@SerialVersionUID(0L)
final case class BotAccessQueries(
    ) extends scalapb.GeneratedMessage with scalapb.Message[BotAccessQueries] with scalapb.lenses.Updatable[BotAccessQueries] {
    final override def serializedSize: _root_.scala.Int = 0
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessQueries = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag => _input__.skipField(tag)
        }
      }
      messages.botaccess.BotAccessQueries(
      )
    }
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = throw new MatchError(__fieldNumber)
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = messages.botaccess.BotAccessQueries
}

object BotAccessQueries extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessQueries = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    messages.botaccess.BotAccessQueries(
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessQueries] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      messages.botaccess.BotAccessQueries(
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BotaccessProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BotaccessProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.messages.botaccess.BotAccessQueries.HasAccess,
    _root_.messages.botaccess.BotAccessQueries.HasAccessResponse,
    _root_.messages.botaccess.BotAccessQueries.GetRoles,
    _root_.messages.botaccess.BotAccessQueries.GetRolesResponse,
    _root_.messages.botaccess.BotAccessQueries.HasPremiumAccess,
    _root_.messages.botaccess.BotAccessQueries.HasPremiumAccessResponse,
    _root_.messages.botaccess.BotAccessQueries.GetPremiumAccess,
    _root_.messages.botaccess.BotAccessQueries.GetPremiumAccessResponse
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = messages.botaccess.BotAccessQueries(
  )
  @SerialVersionUID(0L)
  final case class HasAccess(
      userId: _root_.scala.Int,
      service: _root_.scala.Predef.String,
      api: _root_.scala.Predef.String
      ) extends scalapb.GeneratedMessage with scalapb.Message[HasAccess] with scalapb.lenses.Updatable[HasAccess] with botaccess.BotAccessQuery {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, userId)
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, service)
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, api)
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeInt32(1, userId)
        _output__.writeString(2, service)
        _output__.writeString(3, api)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessQueries.HasAccess = {
        var __userId = this.userId
        var __service = this.service
        var __api = this.api
        var __requiredFields0: _root_.scala.Long = 0x7L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __userId = _input__.readInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __service = _input__.readString()
              __requiredFields0 &= 0xfffffffffffffffdL
            case 26 =>
              __api = _input__.readString()
              __requiredFields0 &= 0xfffffffffffffffbL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        messages.botaccess.BotAccessQueries.HasAccess(
            userId = __userId,
            service = __service,
            api = __api
        )
      }
      def withUserId(__v: _root_.scala.Int): HasAccess = copy(userId = __v)
      def withService(__v: _root_.scala.Predef.String): HasAccess = copy(service = __v)
      def withApi(__v: _root_.scala.Predef.String): HasAccess = copy(api = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => userId
          case 2 => service
          case 3 => api
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(userId)
          case 2 => _root_.scalapb.descriptors.PString(service)
          case 3 => _root_.scalapb.descriptors.PString(api)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = messages.botaccess.BotAccessQueries.HasAccess
  }
  
  object HasAccess extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries.HasAccess] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries.HasAccess] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessQueries.HasAccess = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      messages.botaccess.BotAccessQueries.HasAccess(
        __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
        __fieldsMap(__fields.get(1)).asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap(__fields.get(2)).asInstanceOf[_root_.scala.Predef.String]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessQueries.HasAccess] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        messages.botaccess.BotAccessQueries.HasAccess(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Predef.String],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Predef.String]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = messages.botaccess.BotAccessQueries.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = messages.botaccess.BotAccessQueries.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = messages.botaccess.BotAccessQueries.HasAccess(
      userId = 0,
      service = "",
      api = ""
    )
    implicit class HasAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessQueries.HasAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessQueries.HasAccess](_l) {
      def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
      def service: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.service)((c_, f_) => c_.copy(service = f_))
      def api: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.api)((c_, f_) => c_.copy(api = f_))
    }
    final val USER_ID_FIELD_NUMBER = 1
    final val SERVICE_FIELD_NUMBER = 2
    final val API_FIELD_NUMBER = 3
  }
  
  @SerialVersionUID(0L)
  final case class HasAccessResponse(
      hasAccess: _root_.scala.Boolean
      ) extends scalapb.GeneratedMessage with scalapb.Message[HasAccessResponse] with scalapb.lenses.Updatable[HasAccessResponse] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, hasAccess)
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeBool(1, hasAccess)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessQueries.HasAccessResponse = {
        var __hasAccess = this.hasAccess
        var __requiredFields0: _root_.scala.Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __hasAccess = _input__.readBool()
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        messages.botaccess.BotAccessQueries.HasAccessResponse(
            hasAccess = __hasAccess
        )
      }
      def withHasAccess(__v: _root_.scala.Boolean): HasAccessResponse = copy(hasAccess = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => hasAccess
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PBoolean(hasAccess)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = messages.botaccess.BotAccessQueries.HasAccessResponse
  }
  
  object HasAccessResponse extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries.HasAccessResponse] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries.HasAccessResponse] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessQueries.HasAccessResponse = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      messages.botaccess.BotAccessQueries.HasAccessResponse(
        __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Boolean]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessQueries.HasAccessResponse] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        messages.botaccess.BotAccessQueries.HasAccessResponse(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Boolean]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = messages.botaccess.BotAccessQueries.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = messages.botaccess.BotAccessQueries.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = messages.botaccess.BotAccessQueries.HasAccessResponse(
      hasAccess = false
    )
    implicit class HasAccessResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessQueries.HasAccessResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessQueries.HasAccessResponse](_l) {
      def hasAccess: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.hasAccess)((c_, f_) => c_.copy(hasAccess = f_))
    }
    final val HASACCESS_FIELD_NUMBER = 1
  }
  
  @SerialVersionUID(0L)
  final case class GetRoles(
      userId: _root_.scala.Int
      ) extends scalapb.GeneratedMessage with scalapb.Message[GetRoles] with scalapb.lenses.Updatable[GetRoles] with botaccess.BotAccessQuery {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, userId)
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeInt32(1, userId)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessQueries.GetRoles = {
        var __userId = this.userId
        var __requiredFields0: _root_.scala.Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __userId = _input__.readInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        messages.botaccess.BotAccessQueries.GetRoles(
            userId = __userId
        )
      }
      def withUserId(__v: _root_.scala.Int): GetRoles = copy(userId = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => userId
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(userId)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = messages.botaccess.BotAccessQueries.GetRoles
  }
  
  object GetRoles extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries.GetRoles] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries.GetRoles] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessQueries.GetRoles = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      messages.botaccess.BotAccessQueries.GetRoles(
        __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessQueries.GetRoles] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        messages.botaccess.BotAccessQueries.GetRoles(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = messages.botaccess.BotAccessQueries.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = messages.botaccess.BotAccessQueries.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = messages.botaccess.BotAccessQueries.GetRoles(
      userId = 0
    )
    implicit class GetRolesLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessQueries.GetRoles]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessQueries.GetRoles](_l) {
      def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    }
    final val USER_ID_FIELD_NUMBER = 1
  }
  
  @SerialVersionUID(0L)
  final case class GetRolesResponse(
      roles: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
      ) extends scalapb.GeneratedMessage with scalapb.Message[GetRolesResponse] with scalapb.lenses.Updatable[GetRolesResponse] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        roles.foreach(roles => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, roles))
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        roles.foreach { __v =>
          _output__.writeString(1, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessQueries.GetRolesResponse = {
        val __roles = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.roles)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __roles += _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        messages.botaccess.BotAccessQueries.GetRolesResponse(
            roles = __roles.result()
        )
      }
      def clearRoles = copy(roles = _root_.scala.collection.Seq.empty)
      def addRoles(__vs: _root_.scala.Predef.String*): GetRolesResponse = addAllRoles(__vs)
      def addAllRoles(__vs: TraversableOnce[_root_.scala.Predef.String]): GetRolesResponse = copy(roles = roles ++ __vs)
      def withRoles(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): GetRolesResponse = copy(roles = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => roles
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(roles.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = messages.botaccess.BotAccessQueries.GetRolesResponse
  }
  
  object GetRolesResponse extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries.GetRolesResponse] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries.GetRolesResponse] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessQueries.GetRolesResponse = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      messages.botaccess.BotAccessQueries.GetRolesResponse(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessQueries.GetRolesResponse] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        messages.botaccess.BotAccessQueries.GetRolesResponse(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = messages.botaccess.BotAccessQueries.javaDescriptor.getNestedTypes.get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = messages.botaccess.BotAccessQueries.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = messages.botaccess.BotAccessQueries.GetRolesResponse(
    )
    implicit class GetRolesResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessQueries.GetRolesResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessQueries.GetRolesResponse](_l) {
      def roles: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.roles)((c_, f_) => c_.copy(roles = f_))
    }
    final val ROLES_FIELD_NUMBER = 1
  }
  
  @SerialVersionUID(0L)
  final case class HasPremiumAccess(
      userId: _root_.scala.Int,
      service: _root_.scala.Predef.String,
      api: _root_.scala.Predef.String
      ) extends scalapb.GeneratedMessage with scalapb.Message[HasPremiumAccess] with scalapb.lenses.Updatable[HasPremiumAccess] with botaccess.BotAccessQuery {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, userId)
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, service)
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, api)
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeInt32(1, userId)
        _output__.writeString(2, service)
        _output__.writeString(3, api)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessQueries.HasPremiumAccess = {
        var __userId = this.userId
        var __service = this.service
        var __api = this.api
        var __requiredFields0: _root_.scala.Long = 0x7L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __userId = _input__.readInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __service = _input__.readString()
              __requiredFields0 &= 0xfffffffffffffffdL
            case 26 =>
              __api = _input__.readString()
              __requiredFields0 &= 0xfffffffffffffffbL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        messages.botaccess.BotAccessQueries.HasPremiumAccess(
            userId = __userId,
            service = __service,
            api = __api
        )
      }
      def withUserId(__v: _root_.scala.Int): HasPremiumAccess = copy(userId = __v)
      def withService(__v: _root_.scala.Predef.String): HasPremiumAccess = copy(service = __v)
      def withApi(__v: _root_.scala.Predef.String): HasPremiumAccess = copy(api = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => userId
          case 2 => service
          case 3 => api
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(userId)
          case 2 => _root_.scalapb.descriptors.PString(service)
          case 3 => _root_.scalapb.descriptors.PString(api)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = messages.botaccess.BotAccessQueries.HasPremiumAccess
  }
  
  object HasPremiumAccess extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries.HasPremiumAccess] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries.HasPremiumAccess] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessQueries.HasPremiumAccess = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      messages.botaccess.BotAccessQueries.HasPremiumAccess(
        __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int],
        __fieldsMap(__fields.get(1)).asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap(__fields.get(2)).asInstanceOf[_root_.scala.Predef.String]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessQueries.HasPremiumAccess] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        messages.botaccess.BotAccessQueries.HasPremiumAccess(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Predef.String],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[_root_.scala.Predef.String]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = messages.botaccess.BotAccessQueries.javaDescriptor.getNestedTypes.get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = messages.botaccess.BotAccessQueries.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = messages.botaccess.BotAccessQueries.HasPremiumAccess(
      userId = 0,
      service = "",
      api = ""
    )
    implicit class HasPremiumAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessQueries.HasPremiumAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessQueries.HasPremiumAccess](_l) {
      def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
      def service: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.service)((c_, f_) => c_.copy(service = f_))
      def api: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.api)((c_, f_) => c_.copy(api = f_))
    }
    final val USER_ID_FIELD_NUMBER = 1
    final val SERVICE_FIELD_NUMBER = 2
    final val API_FIELD_NUMBER = 3
  }
  
  @SerialVersionUID(0L)
  final case class HasPremiumAccessResponse(
      hasAccess: _root_.scala.Boolean
      ) extends scalapb.GeneratedMessage with scalapb.Message[HasPremiumAccessResponse] with scalapb.lenses.Updatable[HasPremiumAccessResponse] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, hasAccess)
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeBool(1, hasAccess)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessQueries.HasPremiumAccessResponse = {
        var __hasAccess = this.hasAccess
        var __requiredFields0: _root_.scala.Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __hasAccess = _input__.readBool()
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        messages.botaccess.BotAccessQueries.HasPremiumAccessResponse(
            hasAccess = __hasAccess
        )
      }
      def withHasAccess(__v: _root_.scala.Boolean): HasPremiumAccessResponse = copy(hasAccess = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => hasAccess
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PBoolean(hasAccess)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = messages.botaccess.BotAccessQueries.HasPremiumAccessResponse
  }
  
  object HasPremiumAccessResponse extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries.HasPremiumAccessResponse] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries.HasPremiumAccessResponse] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessQueries.HasPremiumAccessResponse = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      messages.botaccess.BotAccessQueries.HasPremiumAccessResponse(
        __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Boolean]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessQueries.HasPremiumAccessResponse] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        messages.botaccess.BotAccessQueries.HasPremiumAccessResponse(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Boolean]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = messages.botaccess.BotAccessQueries.javaDescriptor.getNestedTypes.get(5)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = messages.botaccess.BotAccessQueries.scalaDescriptor.nestedMessages(5)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = messages.botaccess.BotAccessQueries.HasPremiumAccessResponse(
      hasAccess = false
    )
    implicit class HasPremiumAccessResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessQueries.HasPremiumAccessResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessQueries.HasPremiumAccessResponse](_l) {
      def hasAccess: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.hasAccess)((c_, f_) => c_.copy(hasAccess = f_))
    }
    final val HASACCESS_FIELD_NUMBER = 1
  }
  
  @SerialVersionUID(0L)
  final case class GetPremiumAccess(
      userId: _root_.scala.Int
      ) extends scalapb.GeneratedMessage with scalapb.Message[GetPremiumAccess] with scalapb.lenses.Updatable[GetPremiumAccess] with botaccess.BotAccessQuery {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, userId)
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeInt32(1, userId)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessQueries.GetPremiumAccess = {
        var __userId = this.userId
        var __requiredFields0: _root_.scala.Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __userId = _input__.readInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        messages.botaccess.BotAccessQueries.GetPremiumAccess(
            userId = __userId
        )
      }
      def withUserId(__v: _root_.scala.Int): GetPremiumAccess = copy(userId = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => userId
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(userId)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = messages.botaccess.BotAccessQueries.GetPremiumAccess
  }
  
  object GetPremiumAccess extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries.GetPremiumAccess] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries.GetPremiumAccess] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessQueries.GetPremiumAccess = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      messages.botaccess.BotAccessQueries.GetPremiumAccess(
        __fieldsMap(__fields.get(0)).asInstanceOf[_root_.scala.Int]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessQueries.GetPremiumAccess] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        messages.botaccess.BotAccessQueries.GetPremiumAccess(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Int]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = messages.botaccess.BotAccessQueries.javaDescriptor.getNestedTypes.get(6)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = messages.botaccess.BotAccessQueries.scalaDescriptor.nestedMessages(6)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = messages.botaccess.BotAccessQueries.GetPremiumAccess(
      userId = 0
    )
    implicit class GetPremiumAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessQueries.GetPremiumAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessQueries.GetPremiumAccess](_l) {
      def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    }
    final val USER_ID_FIELD_NUMBER = 1
  }
  
  @SerialVersionUID(0L)
  final case class GetPremiumAccessResponse(
      accesses: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
      ) extends scalapb.GeneratedMessage with scalapb.Message[GetPremiumAccessResponse] with scalapb.lenses.Updatable[GetPremiumAccessResponse] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        accesses.foreach(accesses => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, accesses))
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        accesses.foreach { __v =>
          _output__.writeString(1, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): messages.botaccess.BotAccessQueries.GetPremiumAccessResponse = {
        val __accesses = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.accesses)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __accesses += _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        messages.botaccess.BotAccessQueries.GetPremiumAccessResponse(
            accesses = __accesses.result()
        )
      }
      def clearAccesses = copy(accesses = _root_.scala.collection.Seq.empty)
      def addAccesses(__vs: _root_.scala.Predef.String*): GetPremiumAccessResponse = addAllAccesses(__vs)
      def addAllAccesses(__vs: TraversableOnce[_root_.scala.Predef.String]): GetPremiumAccessResponse = copy(accesses = accesses ++ __vs)
      def withAccesses(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): GetPremiumAccessResponse = copy(accesses = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => accesses
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(accesses.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = messages.botaccess.BotAccessQueries.GetPremiumAccessResponse
  }
  
  object GetPremiumAccessResponse extends scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries.GetPremiumAccessResponse] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[messages.botaccess.BotAccessQueries.GetPremiumAccessResponse] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): messages.botaccess.BotAccessQueries.GetPremiumAccessResponse = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      messages.botaccess.BotAccessQueries.GetPremiumAccessResponse(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[messages.botaccess.BotAccessQueries.GetPremiumAccessResponse] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        messages.botaccess.BotAccessQueries.GetPremiumAccessResponse(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = messages.botaccess.BotAccessQueries.javaDescriptor.getNestedTypes.get(7)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = messages.botaccess.BotAccessQueries.scalaDescriptor.nestedMessages(7)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = messages.botaccess.BotAccessQueries.GetPremiumAccessResponse(
    )
    implicit class GetPremiumAccessResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessQueries.GetPremiumAccessResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessQueries.GetPremiumAccessResponse](_l) {
      def accesses: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.accesses)((c_, f_) => c_.copy(accesses = f_))
    }
    final val ACCESSES_FIELD_NUMBER = 1
  }
  
  implicit class BotAccessQueriesLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, messages.botaccess.BotAccessQueries]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, messages.botaccess.BotAccessQueries](_l) {
  }
}
